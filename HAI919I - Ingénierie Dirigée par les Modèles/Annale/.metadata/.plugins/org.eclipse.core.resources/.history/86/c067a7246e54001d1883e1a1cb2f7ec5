package UtilisationObjet;
import java.awt.Taskbar.State;
import java.util.List;
import org.eclipse.emf.*;
import org.eclipse.emf.common.util.*;
import org.eclipse.emf.ecore.*;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.XMLResource;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.eclipse.emf.ecore.xmi.impl.XMLMapImpl;
import org.eclipse.uml2.uml.StateMachine;
import org.eclipse.uml2.uml.Transition;
import org.eclipse.uml2.uml.Trigger;
import org.eclipse.uml2.*;
import org.eclipse.uml2.uml.Association;
import org.eclipse.uml2.uml.Behavior;
import org.eclipse.uml2.uml.CallEvent;
import org.eclipse.uml2.uml.Class;
import org.eclipse.uml2.uml.Model;
import org.eclipse.uml2.uml.Operation;
import org.eclipse.uml2.uml.Package;
import org.eclipse.uml2.uml.PackageableElement;
import org.eclipse.uml2.uml.Property;
import org.eclipse.uml2.uml.Region;
import org.eclipse.uml2.uml.UMLFactory;
import org.eclipse.uml2.uml.UMLFactory;
import org.eclipse.uml2.uml.UMLPackage;
import org.eclipse.uml2.uml.Vertex;
import org.eclipse.uml2.uml.VisibilityKind;
import objet.Objet;
import objet.ObjetPackage;


public class Manipulationsobjets {
	private static Objet monObjet;

	public static void main(String[] args) {
		
		//Je charge l'instance map.xmi du méta-modèle maps.ecore
		Resource resource = chargerModele("model/GammePersonnalisable.xmi", ObjetPackage.eINSTANCE); // ligne à adapter au nom de votre modèle
		if (resource == null) System.err.println(" Erreur de chargement du modèle");
		//Instruction récupérant le modèle sous forme d'arbre à partir de la classe racine "Map"
		monObjet = (Objet) resource.getContents().get(0);
		System.out.println(monObjet.getNom());	// affichage du nom de la carte.
	}
	
	public static Resource chargerModele(String uri, EPackage pack) {
		   Resource resource = null;
		   try {
		      URI uriUri = URI.createURI(uri);
		      Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("xmi", new XMIResourceFactoryImpl());
		      resource = (new ResourceSetImpl()).createResource(uriUri);
		      XMLResource.XMLMap xmlMap = new XMLMapImpl();
		      xmlMap.setNoNamespacePackage(pack);
		      java.util.Map options = new java.util.HashMap();
		      options.put(XMLResource.OPTION_XML_MAP, xmlMap);
		      resource.load(options);
		   }
		   catch(Exception e) {
		      System.err.println("ERREUR chargement du modèle : "+e);
		      e.printStackTrace();
		   }
		   return resource;
		}
	
	public static void DecorateurState(Class classe) {
		
		UMLFactory uml= UMLFactory.eINSTANCE;
		Class c = uml.createClass();
		c.setName("Etat_" + classe.getName());
		c.setIsAbstract(true);
		c.setPackage(classe.getPackage());
		
		
		Association a = uml.createAssociation();
		a.setName("Association1");
		a.getEndTypes().add(c);
		a.getEndTypes().add(classe);
		
		
		
		List<StateMachine> p = ReturnStateMachine(classe);
		
		for(StateMachine s : p) {
			for(Operation o:getoperation(s)) {
				Operation operation = uml.createOperation();
				operation.setName(o.getName());
				operation.setIsAbstract(true);
				c.getOwnedOperations().add(operation);
			}
		}
		
		for(StateMachine s : p) {
			for(State o: ReturnEtats(s)) {
				Class state = uml.createClass();
				state.getSuperClasses().add(state);
				state.setName(o.getName());
				state.setPackage(c.getPackage());
				
				for(Operation i : c.getOperations()) {
					Operation operation = uml.createOperation();
					operation.setName(i.getName());
					state.getOwnedOperations().add(i);
				}
				
				
				
			}
		}
		
		
		
	}
	
	public static void sauverModele(String uri, EObject root) {
		   Resource resource = null;
		   try {
		      URI uriUri = URI.createURI(uri);
		      Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("xmi", new XMIResourceFactoryImpl());
		      resource = (new ResourceSetImpl()).createResource(uriUri);
		      resource.getContents().add(root);
		      resource.save(null);
		   } catch (Exception e) {
		      System.err.println("ERREUR sauvegarde du modèle : "+e);
		      e.printStackTrace();
		   }
		}

}