package UtilisationObjet;
import java.awt.Taskbar.State;
import java.util.List;
import org.eclipse.emf.*;
import org.eclipse.emf.common.util.*;
import org.eclipse.emf.ecore.*;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.XMLResource;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.eclipse.emf.ecore.xmi.impl.XMLMapImpl;
import org.eclipse.uml2.uml.StateMachine;
import org.eclipse.uml2.uml.Transition;
import org.eclipse.uml2.uml.Trigger;
import org.eclipse.uml2.*;
import org.eclipse.uml2.uml.Association;
import org.eclipse.uml2.uml.Behavior;
import org.eclipse.uml2.uml.CallEvent;
import org.eclipse.uml2.uml.Class;
import org.eclipse.uml2.uml.Model;
import org.eclipse.uml2.uml.Operation;
import org.eclipse.uml2.uml.Package;
import org.eclipse.uml2.uml.PackageableElement;
import org.eclipse.uml2.uml.Property;
import org.eclipse.uml2.uml.Region;
import org.eclipse.uml2.uml.UMLFactory;
import org.eclipse.uml2.uml.UMLFactory;
import org.eclipse.uml2.uml.UMLPackage;
import org.eclipse.uml2.uml.Vertex;
import org.eclipse.uml2.uml.VisibilityKind;
import objet.Objet;
import objet.ObjetPackage;


public class Manipulationsobjets {
	private static Objet monObjet;

	public static void main(String[] args) {
		
		//Je charge l'instance map.xmi du méta-modèle maps.ecore
		Resource resource = chargerModele("model/GammePersonnalisable.xmi", ObjetPackage.eINSTANCE); // ligne à adapter au nom de votre modèle
		if (resource == null) System.err.println(" Erreur de chargement du modèle");
		//Instruction récupérant le modèle sous forme d'arbre à partir de la classe racine "Map"
		
		Model uml = DecorateurState();
		
		sauverModele("model/decorateur.uml", uml);
		
	}
	
	public static Resource chargerModele(String uri, EPackage pack) {
		   Resource resource = null;
		   try {
		      URI uriUri = URI.createURI(uri);
		      Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("xmi", new XMIResourceFactoryImpl());
		      resource = (new ResourceSetImpl()).createResource(uriUri);
		      XMLResource.XMLMap xmlMap = new XMLMapImpl();
		      xmlMap.setNoNamespacePackage(pack);
		      java.util.Map options = new java.util.HashMap();
		      options.put(XMLResource.OPTION_XML_MAP, xmlMap);
		      resource.load(options);
		   }
		   catch(Exception e) {
		      System.err.println("ERREUR chargement du modèle : "+e);
		      e.printStackTrace();
		   }
		   return resource;
		}
	
	public static Model DecorateurState() {
		
		
		
		UMLFactory uml= UMLFactory.eINSTANCE;
		Class objetabstrait = uml.createClass();
		objetabstrait.setName("ObjetAbstrait");
		objetabstrait.setIsAbstract(true);
		Operation prix = uml.createOperation();
		prix.setName("prix");
		prix.setVisibility(VisibilityKind.get(VisibilityKind.PUBLIC));
		
		Operation imageImprimee = uml.createOperation();
		imageImprimee.setName("imageImprimee");
		imageImprimee.setVisibility(VisibilityKind.get(VisibilityKind.PUBLIC));
		
		
		objetabstrait.getOwnedOperations().add(prix);
		objetabstrait.getOwnedOperations().add(imageImprimee);
		
		Class objetdecore = uml.createClass();
		objetdecore.setName("ObjetDecore");
		prix = uml.createOperation();
		prix.setName("prix");
		prix.setVisibility(VisibilityKind.get(VisibilityKind.PUBLIC));
		
		imageImprimee = uml.createOperation();
		imageImprimee.setName("imageImprimee");
		imageImprimee.setVisibility(VisibilityKind.get(VisibilityKind.PUBLIC));
		
		
		objetdecore.getOwnedOperations().add(prix);
		objetdecore.getOwnedOperations().add(imageImprimee);
		
		
		
		
		Class tasse = uml.createClass();
		tasse.setName("Tasse");
		prix = uml.createOperation();
		prix.setName("prix");
		prix.setVisibility(VisibilityKind.get(VisibilityKind.PUBLIC));
		
		imageImprimee = uml.createOperation();
		imageImprimee.setName("imageImprimee");
		imageImprimee.setVisibility(VisibilityKind.get(VisibilityKind.PUBLIC));
		
		
		tasse.getOwnedOperations().add(prix);
		tasse.getOwnedOperations().add(imageImprimee);
		
		
		Class bol = uml.createClass();
		bol.setName("Bol");
		prix = uml.createOperation();
		prix.setName("prix");
		prix.setVisibility(VisibilityKind.get(VisibilityKind.PUBLIC));
		
		imageImprimee = uml.createOperation();
		imageImprimee.setName("imageImprimee");
		imageImprimee.setVisibility(VisibilityKind.get(VisibilityKind.PUBLIC));
		
		
		bol.getOwnedOperations().add(prix);
		bol.getOwnedOperations().add(imageImprimee);
		
		
		
		
		Class decoration = uml.createClass();
		decoration.setName("Decoration");
		prix = uml.createOperation();
		prix.setName("prix");
		prix.setVisibility(VisibilityKind.get(VisibilityKind.PUBLIC));
		
		imageImprimee = uml.createOperation();
		imageImprimee.setName("imageImprimee");
		imageImprimee.setVisibility(VisibilityKind.get(VisibilityKind.PUBLIC));
		
		
		decoration.getOwnedOperations().add(prix);
		decoration.getOwnedOperations().add(imageImprimee);
		
		
		
		
		
		
		Class texte = uml.createClass();
		texte.setName("Texte");
		prix = uml.createOperation();
		prix.setName("prix");
		prix.setVisibility(VisibilityKind.get(VisibilityKind.PUBLIC));
		
		imageImprimee = uml.createOperation();
		imageImprimee.setName("imageImprimee");
		imageImprimee.setVisibility(VisibilityKind.get(VisibilityKind.PUBLIC));
		
		
		texte.getOwnedOperations().add(prix);
		texte.getOwnedOperations().add(imageImprimee);
		
		
		
		Class photo = uml.createClass();
		photo.setName("Texte");
		prix = uml.createOperation();
		prix.setName("prix");
		prix.setVisibility(VisibilityKind.get(VisibilityKind.PUBLIC));
		
		imageImprimee = uml.createOperation();
		imageImprimee.setName("imageImprimee");
		imageImprimee.setVisibility(VisibilityKind.get(VisibilityKind.PUBLIC));
		
		
		photo.getOwnedOperations().add(prix);
		photo.getOwnedOperations().add(imageImprimee);
		
		
		objetdecore.getSuperClasses().add(objetabstrait);
		decoration.getSuperClasses().add(objetabstrait);
		tasse.getSuperClasses().add(objetdecore);
		bol.getSuperClasses().add(objetdecore);
		
		texte.getSuperClasses().add(decoration);
		photo.getSuperClasses().add(decoration);
		
		
		
		
		Property p1 = uml.createProperty();
        p1.setType(decoration);
        p1.setUpper(1);
        p1.setLower(1);
        objetabstrait.getOwnedAttributes().add(p1);

        Property p2 = uml.createProperty();
        p2.setType(objetabstrait);
        p2.setIsComposite(true);
        decoration.getOwnedAttributes().add(p2);

        Association objAbs_Decoration = uml.createAssociation();
        objAbs_Decoration.setName("decore");
        objAbs_Decoration.getMemberEnds().add(p1);
        objAbs_Decoration.getMemberEnds().add(p2);

		
		
		
        Model model =  uml.createModel();
        model.getPackagedElements().add(objetabstrait);
        model.getPackagedElements().add(objetdecore);
        model.getPackagedElements().add(decoration);
        model.getPackagedElements().add(tasse);
        model.getPackagedElements().add(bol);
        model.getPackagedElements().add(texte);
        model.getPackagedElements().add(photo);
        
        model.getPackagedElements().add(objAbs_Decoration);
        
        return model;
		
		
		
		
	}
	
	public static void sauverModele(String uri, EObject root) {
		   Resource resource = null;
		   try {
		      URI uriUri = URI.createURI(uri);
		      Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put("uml", new XMIResourceFactoryImpl());
		      resource = (new ResourceSetImpl()).createResource(uriUri);
		      resource.getContents().add(root);
		      resource.save(null);
		   } catch (Exception e) {
		      System.err.println("ERREUR sauvegarde du modèle : "+e);
		      e.printStackTrace();
		   }
		}

}